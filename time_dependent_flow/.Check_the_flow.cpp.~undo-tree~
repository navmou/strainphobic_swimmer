(undo-tree-save-format-version . 1)
"ac056f0cd9ba6be2a5fa05a596f9abe0afdedc0c"
[nil nil nil nil (25220 45454 362897 331000) 0 nil]
([nil nil ((#("  twoDvec A = generate_As(sigma , tau , n_time_steps , dt);" 0 2 (fontified t c-is-sws t c-in-sws t) 2 3 (fontified t c-is-sws t face font-lock-type-face) 3 8 (fontified t face font-lock-type-face) 8 9 (fontified t c-type c-decl-id-start face font-lock-type-face) 9 10 (fontified t) 10 11 (fontified t face font-lock-variable-name-face) 11 59 (fontified t)) . 6541) (t 25219 28627 463144 0)) nil (25220 45454 362896 671000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6599 . 6600) (nil fontified nil 6552 . 6600) (nil fontified nil 6551 . 6552) (nil fontified nil 6550 . 6551) (nil fontified nil 6549 . 6550) (nil fontified nil 6544 . 6549) (nil fontified nil 6543 . 6544) (nil fontified nil 6542 . 6543) (nil fontified nil 6541 . 6542) (6541 . 6600)) nil (25220 45454 362896 88000) 0 nil])
([nil nil ((#("twoDvec generate_As(double sigma , double tau , int n_time_steps , double dt);" 0 6 (fontified t face font-lock-type-face) 6 7 (fontified t c-type c-decl-id-start face font-lock-type-face) 7 8 (fontified t) 8 19 (fontified t face font-lock-function-name-face) 19 20 (fontified t c-type c-decl-arg-start) 20 26 (fontified t face font-lock-type-face) 26 27 (fontified t) 27 32 (fontified t face font-lock-variable-name-face) 32 33 (fontified t) 33 34 (fontified t c-type c-decl-arg-start) 34 35 (fontified t) 35 41 (fontified t face font-lock-type-face) 41 42 (fontified t) 42 45 (fontified t face font-lock-variable-name-face) 45 46 (fontified t) 46 47 (fontified t c-type c-decl-arg-start) 47 48 (fontified t) 48 51 (fontified t face font-lock-type-face) 51 52 (fontified t) 52 64 (fontified t face font-lock-variable-name-face) 64 65 (fontified t) 65 66 (fontified t c-type c-decl-arg-start) 66 67 (fontified t) 67 73 (fontified t face font-lock-type-face) 73 74 (fontified t) 74 76 (fontified t face font-lock-variable-name-face) 76 78 (fontified t)) . 2874) (undo-tree-id5 . -16)) nil (25220 45454 362894 985000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2951 . 2952) (nil fontified nil 2950 . 2952) (nil fontified nil 2948 . 2950) (nil fontified nil 2947 . 2948) (nil fontified nil 2941 . 2947) (nil fontified nil 2940 . 2941) (nil fontified nil 2939 . 2940) (nil fontified nil 2938 . 2939) (nil fontified nil 2926 . 2938) (nil fontified nil 2925 . 2926) (nil fontified nil 2922 . 2925) (nil fontified nil 2921 . 2922) (nil fontified nil 2920 . 2921) (nil fontified nil 2919 . 2920) (nil fontified nil 2916 . 2919) (nil fontified nil 2915 . 2916) (nil fontified nil 2909 . 2915) (nil fontified nil 2908 . 2909) (nil fontified nil 2907 . 2908) (nil fontified nil 2906 . 2907) (nil fontified nil 2901 . 2906) (nil fontified nil 2900 . 2901) (nil fontified nil 2894 . 2900) (nil fontified nil 2893 . 2894) (nil fontified nil 2882 . 2893) (nil fontified nil 2881 . 2882) (nil fontified nil 2880 . 2881) (nil fontified nil 2874 . 2880) (2874 . 2952)) nil (25220 45454 362893 680000) 0 nil])
([nil nil ((#("
twoDvec generate_As(double sigma , double tau , int n_time_steps , double dt)
{
  twoDvec A = twoDzeros(n_fields, (n_time_steps+steady_A));
  for (int t = 0; t < (n_time_steps-1+steady_A); ++t)
    {
      for (int i = 0; i < n_fields; ++i)
	{
	  A[i][t+1] = A[i][t] - (A[i][t]/tau)*dt + sigma*dist(generator);
	}
    }
  return A;
}


twoDvec update_flow(triDvec &V , twoDvec &A , int t) 
{
  twoDvec v = twoDzeros(field_x , field_y);
  for (int i = 0; i < n_fields; ++i)
    {
      for (int indx = 0; indx < field_x; ++indx)
	{
	  for (int indy = 0; indy < field_y; ++indy)
	    {
	      v[indx][indy] += V[i][indx][indy]*A[i][t+steady_A];
	    }
	}
    }
  return v;
}

" 0 1 (fontified t) 1 7 (fontified t face font-lock-type-face) 7 8 (fontified t c-type c-decl-id-start face font-lock-type-face) 8 9 (fontified t) 9 20 (fontified t face font-lock-function-name-face) 20 21 (fontified t c-type c-decl-arg-start) 21 27 (fontified t face font-lock-type-face) 27 28 (fontified t) 28 33 (fontified t face font-lock-variable-name-face) 33 34 (fontified t) 34 35 (fontified t c-type c-decl-arg-start) 35 36 (fontified t) 36 42 (fontified t face font-lock-type-face) 42 43 (fontified t) 43 46 (fontified t face font-lock-variable-name-face) 46 47 (fontified t) 47 48 (fontified t c-type c-decl-arg-start) 48 49 (fontified t) 49 52 (fontified t face font-lock-type-face) 52 53 (fontified t) 53 65 (fontified t face font-lock-variable-name-face) 65 66 (fontified t) 66 67 (fontified t c-type c-decl-arg-start) 67 68 (fontified t) 68 74 (fontified t face font-lock-type-face) 74 75 (fontified t) 75 77 (fontified t face font-lock-variable-name-face) 77 83 (fontified t) 83 89 (fontified t face font-lock-type-face) 89 90 (fontified t c-type c-decl-id-start face font-lock-type-face) 90 91 (fontified t) 91 92 (fontified t face font-lock-variable-name-face) 92 113 (fontified t) 113 141 (fontified t) 141 143 (fontified t) 143 146 (fontified t face font-lock-keyword-face) 146 148 (fontified t) 148 150 (fontified t face font-lock-type-face) 150 151 (fontified t c-type c-decl-id-start face font-lock-type-face) 151 152 (fontified t) 152 153 (fontified t face font-lock-variable-name-face) 153 207 (fontified t) 207 210 (fontified t face font-lock-keyword-face) 210 212 (fontified t) 212 214 (fontified t face font-lock-type-face) 214 215 (fontified t c-type c-decl-id-start face font-lock-type-face) 215 216 (fontified t) 216 217 (fontified t face font-lock-variable-name-face) 217 323 (fontified t) 323 329 (fontified t face font-lock-keyword-face) 329 337 (fontified t) 337 343 (fontified t face font-lock-type-face) 343 344 (fontified t c-type c-decl-id-start face font-lock-type-face) 344 345 (fontified t) 345 356 (fontified t face font-lock-function-name-face) 356 357 (fontified t c-type c-decl-arg-start) 357 364 (fontified t face font-lock-type-face) 364 366 (fontified t) 366 367 (fontified t face font-lock-variable-name-face) 367 368 (fontified t) 368 369 (fontified t c-type c-decl-arg-start) 369 370 (fontified t) 370 377 (fontified t face font-lock-type-face) 377 379 (fontified t) 379 380 (fontified t face font-lock-variable-name-face) 380 381 (fontified t) 381 382 (fontified t c-type c-decl-arg-start) 382 383 (fontified t) 383 386 (fontified t face font-lock-type-face) 386 387 (fontified t) 387 388 (fontified t face font-lock-variable-name-face) 388 395 (fontified t) 395 401 (fontified t face font-lock-type-face) 401 402 (fontified t c-type c-decl-id-start face font-lock-type-face) 402 403 (fontified t) 403 404 (fontified t face font-lock-variable-name-face) 404 439 (fontified t) 439 442 (fontified t face font-lock-keyword-face) 442 444 (fontified t) 444 446 (fontified t face font-lock-type-face) 446 447 (fontified t c-type c-decl-id-start face font-lock-type-face) 447 448 (fontified t) 448 449 (fontified t face font-lock-variable-name-face) 449 486 (fontified t) 486 489 (fontified t face font-lock-keyword-face) 489 491 (fontified t) 491 493 (fontified t face font-lock-type-face) 493 494 (fontified t c-type c-decl-id-start face font-lock-type-face) 494 495 (fontified t) 495 499 (fontified t face font-lock-variable-name-face) 499 535 (fontified t) 535 538 (fontified t face font-lock-keyword-face) 538 540 (fontified t) 540 542 (fontified t face font-lock-type-face) 542 543 (fontified t c-type c-decl-id-start face font-lock-type-face) 543 544 (fontified t) 544 548 (fontified t face font-lock-variable-name-face) 548 662 (fontified t) 662 668 (fontified t face font-lock-keyword-face) 668 675 (fontified t)) . 7988) (undo-tree-id0 . -18) (undo-tree-id1 . -675) (undo-tree-id2 . -675) (undo-tree-id3 . -675) (undo-tree-id4 . -675) 8663) nil (25220 45454 362891 415000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8662 . 8663) (nil fontified nil 8656 . 8663) (nil fontified nil 8650 . 8656) (nil fontified nil 8536 . 8650) (nil fontified nil 8532 . 8536) (nil fontified nil 8531 . 8532) (nil fontified nil 8530 . 8531) (nil fontified nil 8528 . 8530) (nil fontified nil 8526 . 8528) (nil fontified nil 8523 . 8526) (nil fontified nil 8487 . 8523) (nil fontified nil 8483 . 8487) (nil fontified nil 8482 . 8483) (nil fontified nil 8481 . 8482) (nil fontified nil 8479 . 8481) (nil fontified nil 8477 . 8479) (nil fontified nil 8474 . 8477) (nil fontified nil 8437 . 8474) (nil fontified nil 8436 . 8437) (nil fontified nil 8435 . 8436) (nil fontified nil 8434 . 8435) (nil fontified nil 8432 . 8434) (nil fontified nil 8430 . 8432) (nil fontified nil 8427 . 8430) (nil fontified nil 8392 . 8427) (nil fontified nil 8391 . 8392) (nil fontified nil 8390 . 8391) (nil fontified nil 8389 . 8390) (nil fontified nil 8383 . 8389) (nil fontified nil 8376 . 8383) (nil fontified nil 8375 . 8376) (nil fontified nil 8374 . 8375) (nil fontified nil 8371 . 8374) (nil fontified nil 8370 . 8371) (nil fontified nil 8369 . 8370) (nil fontified nil 8368 . 8369) (nil fontified nil 8367 . 8368) (nil fontified nil 8365 . 8367) (nil fontified nil 8358 . 8365) (nil fontified nil 8357 . 8358) (nil fontified nil 8356 . 8357) (nil fontified nil 8355 . 8356) (nil fontified nil 8354 . 8355) (nil fontified nil 8352 . 8354) (nil fontified nil 8345 . 8352) (nil fontified nil 8344 . 8345) (nil fontified nil 8333 . 8344) (nil fontified nil 8332 . 8333) (nil fontified nil 8331 . 8332) (nil fontified nil 8325 . 8331) (nil fontified nil 8317 . 8325) (nil fontified nil 8311 . 8317) (nil fontified nil 8205 . 8311) (nil fontified nil 8204 . 8205) (nil fontified nil 8203 . 8204) (nil fontified nil 8202 . 8203) (nil fontified nil 8200 . 8202) (nil fontified nil 8198 . 8200) (nil fontified nil 8195 . 8198) (nil fontified nil 8141 . 8195) (nil fontified nil 8140 . 8141) (nil fontified nil 8139 . 8140) (nil fontified nil 8138 . 8139) (nil fontified nil 8136 . 8138) (nil fontified nil 8134 . 8136) (nil fontified nil 8131 . 8134) (nil fontified nil 8129 . 8131) (nil fontified nil 8101 . 8129) (nil fontified nil 8080 . 8101) (nil fontified nil 8079 . 8080) (nil fontified nil 8078 . 8079) (nil fontified nil 8077 . 8078) (nil fontified nil 8071 . 8077) (nil fontified nil 8065 . 8071) (nil fontified nil 8063 . 8065) (nil fontified nil 8062 . 8063) (nil fontified nil 8056 . 8062) (nil fontified nil 8055 . 8056) (nil fontified nil 8054 . 8055) (nil fontified nil 8053 . 8054) (nil fontified nil 8041 . 8053) (nil fontified nil 8040 . 8041) (nil fontified nil 8037 . 8040) (nil fontified nil 8036 . 8037) (nil fontified nil 8035 . 8036) (nil fontified nil 8034 . 8035) (nil fontified nil 8031 . 8034) (nil fontified nil 8030 . 8031) (nil fontified nil 8024 . 8030) (nil fontified nil 8023 . 8024) (nil fontified nil 8022 . 8023) (nil fontified nil 8021 . 8022) (nil fontified nil 8016 . 8021) (nil fontified nil 8015 . 8016) (nil fontified nil 8009 . 8015) (nil fontified nil 8008 . 8009) (nil fontified nil 7997 . 8008) (nil fontified nil 7996 . 7997) (nil fontified nil 7995 . 7996) (nil fontified nil 7989 . 7995) (nil fontified nil 7988 . 7989) (7988 . 8663)) nil (25220 45454 362870 386000) 0 nil])
([nil nil ((#("const int field_x = 400, field_y = 10000;" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 8 (fontified t face font-lock-type-face) 8 9 (fontified t c-type c-decl-id-start face font-lock-type-face) 9 10 (fontified t) 10 17 (fontified t face font-lock-variable-name-face) 17 23 (fontified t) 23 24 (fontified t c-type c-decl-id-start) 24 25 (fontified t) 25 32 (fontified t face font-lock-variable-name-face) 32 41 (fontified t)) . 3591) (t 25220 45454 366742 500000)) nil (25220 46541 787553 991000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3631 . 3632) (nil fontified nil 3623 . 3632) (nil fontified nil 3616 . 3623) (nil fontified nil 3615 . 3616) (nil fontified nil 3614 . 3615) (nil fontified nil 3608 . 3614) (nil fontified nil 3601 . 3608) (nil fontified nil 3600 . 3601) (nil fontified nil 3599 . 3600) (nil fontified nil 3597 . 3599) (nil fontified nil 3596 . 3597) (nil fontified nil 3591 . 3596) (3591 . 3632)) nil (25220 46541 787553 64000) 0 nil])
([nil nil ((#("const double sigma = sqrt((2.0*dt)/(n_fields*tau));" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 11 (fontified t face font-lock-type-face) 11 12 (fontified t c-type c-decl-id-start face font-lock-type-face) 12 13 (fontified t) 13 18 (fontified t face font-lock-variable-name-face) 18 51 (fontified t)) . 3657)) nil (25220 46541 787551 712000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3707 . 3708) (nil fontified nil 3675 . 3708) (nil fontified nil 3670 . 3675) (nil fontified nil 3669 . 3670) (nil fontified nil 3668 . 3669) (nil fontified nil 3663 . 3668) (nil fontified nil 3662 . 3663) (nil fontified nil 3657 . 3662) (3657 . 3708)) nil (25220 46541 787551 68000) 0 nil])
([nil nil ((#("      // Updating the flow
      U = update_flow(UXS , A , t); V = update_flow(UYS , A , t);
      A11 = update_flow(A11S , A , t); A21 = update_flow(A21S, A , t);
      A12 = update_flow(A12S , A , t); A22 = update_flow(A11S , A , t);
" 0 6 (c-in-sws t c-is-sws t fontified t) 6 7 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 7 9 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 9 27 (c-in-sws t fontified t face font-lock-comment-face) 27 33 (c-is-sws t c-in-sws t fontified t) 33 34 (c-is-sws t fontified t) 34 236 (fontified t)) . 6867) (undo-tree-id6 . -236) (undo-tree-id7 . -236) 7103) nil (25220 46541 787549 602000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7102 . 7103) (nil fontified nil 6901 . 7103) (nil fontified nil 6900 . 6901) (nil fontified nil 6894 . 6900) (nil fontified nil 6876 . 6894) (nil fontified nil 6874 . 6876) (nil fontified nil 6873 . 6874) (nil fontified nil 6867 . 6873) (6867 . 7103)) nil (25220 46541 787537 848000) 0 nil])
([nil nil ((#("  triDvec UXS, UYS, A11S , A12S, A21S , A22S;
  triDvec D2UX11S , D2UX12S , D2UX22S , D2UY11S , D2UY12S , D2UY22S;
" 0 2 (c-is-sws t c-in-sws t fontified t) 2 3 (c-is-sws t fontified t face font-lock-type-face) 3 8 (fontified t face font-lock-type-face) 8 9 (fontified t c-type c-decl-id-start face font-lock-type-face) 9 10 (fontified t) 10 13 (fontified t face font-lock-variable-name-face) 13 14 (fontified t c-type c-decl-id-start) 14 15 (fontified t) 15 18 (fontified t face font-lock-variable-name-face) 18 19 (fontified t c-type c-decl-id-start) 19 20 (fontified t) 20 24 (fontified t face font-lock-variable-name-face) 24 25 (fontified t) 25 26 (fontified t c-type c-decl-id-start) 26 27 (fontified t) 27 31 (fontified t face font-lock-variable-name-face) 31 32 (fontified t c-type c-decl-id-start) 32 33 (fontified t) 33 37 (fontified t face font-lock-variable-name-face) 37 38 (fontified t) 38 39 (fontified t c-type c-decl-id-start) 39 40 (fontified t) 40 44 (fontified t face font-lock-variable-name-face) 44 48 (fontified t) 48 54 (fontified t face font-lock-type-face) 54 55 (fontified t c-type c-decl-id-start face font-lock-type-face) 55 56 (fontified t) 56 63 (fontified t face font-lock-variable-name-face) 63 64 (fontified t) 64 65 (fontified t c-type c-decl-id-start) 65 66 (fontified t) 66 73 (fontified t face font-lock-variable-name-face) 73 74 (fontified t) 74 75 (fontified t c-type c-decl-id-start) 75 76 (fontified t) 76 83 (fontified t face font-lock-variable-name-face) 83 84 (fontified t) 84 85 (fontified t c-type c-decl-id-start) 85 86 (fontified t) 86 93 (fontified t face font-lock-variable-name-face) 93 94 (fontified t) 94 95 (fontified t c-type c-decl-id-start) 95 96 (fontified t) 96 103 (fontified t face font-lock-variable-name-face) 103 104 (fontified t) 104 105 (fontified t c-type c-decl-id-start) 105 106 (fontified t) 106 113 (fontified t face font-lock-variable-name-face) 113 115 (fontified t)) . 4616) (undo-tree-id8 . -115) (undo-tree-id9 . -115) (undo-tree-id10 . -115) (undo-tree-id11 . -115) 4731 (t 25220 46541 791674 400000)) nil (25220 46659 482133 108000) 0 nil])
([nil current ((nil rear-nonsticky nil 4730 . 4731) (nil fontified nil 4729 . 4731) (nil fontified nil 4722 . 4729) (nil fontified nil 4721 . 4722) (nil fontified nil 4720 . 4721) (nil fontified nil 4719 . 4720) (nil fontified nil 4712 . 4719) (nil fontified nil 4711 . 4712) (nil fontified nil 4710 . 4711) (nil fontified nil 4709 . 4710) (nil fontified nil 4702 . 4709) (nil fontified nil 4701 . 4702) (nil fontified nil 4700 . 4701) (nil fontified nil 4699 . 4700) (nil fontified nil 4692 . 4699) (nil fontified nil 4691 . 4692) (nil fontified nil 4690 . 4691) (nil fontified nil 4689 . 4690) (nil fontified nil 4682 . 4689) (nil fontified nil 4681 . 4682) (nil fontified nil 4680 . 4681) (nil fontified nil 4679 . 4680) (nil fontified nil 4672 . 4679) (nil fontified nil 4671 . 4672) (nil fontified nil 4670 . 4671) (nil fontified nil 4664 . 4670) (nil fontified nil 4660 . 4664) (nil fontified nil 4656 . 4660) (nil fontified nil 4655 . 4656) (nil fontified nil 4654 . 4655) (nil fontified nil 4653 . 4654) (nil fontified nil 4649 . 4653) (nil fontified nil 4648 . 4649) (nil fontified nil 4647 . 4648) (nil fontified nil 4643 . 4647) (nil fontified nil 4642 . 4643) (nil fontified nil 4641 . 4642) (nil fontified nil 4640 . 4641) (nil fontified nil 4636 . 4640) (nil fontified nil 4635 . 4636) (nil fontified nil 4634 . 4635) (nil fontified nil 4631 . 4634) (nil fontified nil 4630 . 4631) (nil fontified nil 4629 . 4630) (nil fontified nil 4626 . 4629) (nil fontified nil 4625 . 4626) (nil fontified nil 4624 . 4625) (nil fontified nil 4619 . 4624) (nil fontified nil 4618 . 4619) (nil fontified nil 4617 . 4618) (nil fontified nil 4616 . 4617) (4616 . 4731)) nil (25220 46659 482120 180000) 0 nil])
nil
