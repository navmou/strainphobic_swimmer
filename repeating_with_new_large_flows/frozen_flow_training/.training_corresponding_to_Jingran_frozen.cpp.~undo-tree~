(undo-tree-save-format-version . 1)
"510fab390693c89081b8307551e656deaa42620e"
[nil nil nil nil (25282 49275 231771 638000) 0 nil]
([nil nil ((#("    Jul. 1, 2022
    Made changes in code to correspond to the Jingran's setup.
    - Non-spherical particles with lambda=2 (Lambda=0.6) as in our PRF manuscript.
    - No settling nor gyrotaxis.
    - Two actions: either to not swim at all, or to swim with constant speed v_s in the instantaneous direction.
    - States are given by sqrt(2*Tr(S^2))*tauK in 20 levels as suggested in the attached figure (the numbers below each column corresponds to the lower bound of the strain for that state).
    Note that the strain in the state is multiplied by tauK=eta/(sqrt(dim+2)*u0)=eta/(2*u0) in your two-dimensional flow.
    - For the reward, you can try both r=-Tr(S^2)*tauK^2 or r=-sqrt(2*Tr(S^2))*tauK to have the same setup. Does the choice of reward function make any difference to the strategy found?
    - For the flow, consider both a frozen flow and a flow with Ku=10 (i.e. tau=1 for the flow with u0=1 and eta=0.1).
    - Consider a number of swimming velocities, for example v_s={0.1,0.2,0.5,1,2,5,10} (or enlarge this range if it seems to be of relevance)." 0 70 (fontified t face font-lock-comment-face c-in-sws t) 70 71 (fontified t face font-lock-comment-face c-in-sws t) 71 581 (fontified t face font-lock-comment-face c-in-sws t) 581 620 (fontified t face font-lock-comment-face c-in-sws t) 620 1067 (fontified t face font-lock-comment-face c-in-sws t)) . 2428) (undo-tree-id0 . -1067) (undo-tree-id1 . -1067) (undo-tree-id2 . -925) (undo-tree-id3 . -1067) 3495 (t 25282 47236 632794 100000)) nil (25282 49275 231770 274000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3494 . 3495) (nil fontified nil 3048 . 3495) (nil fontified nil 3009 . 3048) (nil fontified nil 2499 . 3009) (nil fontified nil 2498 . 2499) (nil fontified nil 2428 . 2498) (2428 . 3495)) nil (25282 49275 231749 969000) 0 nil])
([nil nil ((#("int GET_STATE(double trss);" 0 2 (fontified t face font-lock-type-face) 2 3 (fontified t c-type c-decl-id-start face font-lock-type-face) 3 4 (fontified t) 4 13 (fontified t face font-lock-function-name-face) 13 14 (fontified t c-type c-decl-arg-start) 14 20 (fontified t face font-lock-type-face) 20 21 (fontified t) 21 25 (fontified t face font-lock-variable-name-face) 25 27 (fontified t)) . 4190) (undo-tree-id14 . -13) (t 25282 49275 236771 200000)) nil (25282 49855 585029 629000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4216 . 4217) (nil fontified nil 4215 . 4217) (nil fontified nil 4211 . 4215) (nil fontified nil 4210 . 4211) (nil fontified nil 4204 . 4210) (nil fontified nil 4203 . 4204) (nil fontified nil 4194 . 4203) (nil fontified nil 4193 . 4194) (nil fontified nil 4192 . 4193) (nil fontified nil 4190 . 4192) (4190 . 4217)) nil (25282 49855 585028 470000) 0 nil])
([nil nil ((#("      state = GET_STATE(sqrt(2.0*trSS)*tauK);" 0 45 (fontified t)) . 11762) (undo-tree-id13 . -23)) nil (25282 49855 585027 55000) 0 nil])
([nil nil ((nil rear-nonsticky nil 11806 . 11807) (nil fontified nil 11762 . 11807) (11762 . 11807)) nil (25282 49855 585026 26000) 0 nil])
([nil nil ((#("	  state_new = GET_STATE(sqrt(2.0*trSS)*tauK);" 0 46 (fontified t)) . 14002) (undo-tree-id12 . -24)) nil (25282 49855 585025 460000) 0 nil])
([nil nil ((nil rear-nonsticky nil 14047 . 14048) (nil fontified nil 14002 . 14048) (14002 . 14048)) nil (25282 49855 585024 379000) 0 nil])
([nil nil ((#("
//STATE EVALUATION
int GET_STATE(double trSS){
  int state;

  if(trSS < 0.16){state = 0;}
  else if(trSS >= 0.16 && trSS < 0.23){state = 1;}
  else if(trSS >= 0.23 && trSS < 0.28){state = 2;}
  else if(trSS >= 0.28 && trSS < 0.32){state = 3;}
  else if(trSS >= 0.32 && trSS < 0.36){state = 4;}
  else if(trSS >= 0.36 && trSS < 0.39){state = 5;}
  else if(trSS >= 0.39 && trSS < 0.43){state = 6;}
  else if(trSS >= 0.43 && trSS < 0.45){state = 7;}
  else if(trSS >= 0.45 && trSS < 0.48){state = 8;}
  else if(trSS >= 0.48 && trSS < 0.51){state = 9;}
  else if(trSS >= 0.51 && trSS < 0.53){state = 10;}
  else if(trSS >= 0.53 && trSS < 0.58){state = 11;}
  else if(trSS >= 0.58 && trSS < 0.62){state = 12;}
  else if(trSS >= 0.62 && trSS < 0.68){state = 13;}
  else if(trSS >= 0.68 && trSS < 0.72){state = 14;}
  else if(trSS >= 0.72 && trSS < 0.80){state = 15;}
  else if(trSS >= 0.80 && trSS < 0.88){state = 16;}
  else if(trSS >= 0.88 && trSS < 0.95){state = 17;}
  else if(trSS >= 0.95 && trSS < 1.02){state = 18;}
  else {state = 19;}

  return state;
}
" 0 1 (fontified t) 1 2 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 2 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 3 20 (c-in-sws t fontified t face font-lock-comment-face) 20 21 (c-is-sws t fontified t face font-lock-type-face) 21 22 (fontified t face font-lock-type-face) 22 23 (fontified t c-type c-decl-id-start face font-lock-type-face) 23 24 (fontified t) 24 33 (fontified t face font-lock-function-name-face) 33 34 (fontified t c-type c-decl-arg-start) 34 40 (fontified t face font-lock-type-face) 40 41 (fontified t) 41 45 (fontified t face font-lock-variable-name-face) 45 50 (fontified t) 50 52 (fontified t face font-lock-type-face) 52 53 (fontified t c-type c-decl-id-start face font-lock-type-face) 53 54 (fontified t) 54 59 (fontified t face font-lock-variable-name-face) 59 64 (fontified t) 64 66 (fontified t face font-lock-keyword-face) 66 94 (fontified t) 94 98 (fontified t face font-lock-keyword-face) 98 99 (fontified t) 99 101 (fontified t face font-lock-keyword-face) 101 145 (fontified t) 145 149 (fontified t face font-lock-keyword-face) 149 150 (fontified t) 150 152 (fontified t face font-lock-keyword-face) 152 196 (fontified t) 196 200 (fontified t face font-lock-keyword-face) 200 201 (fontified t) 201 203 (fontified t face font-lock-keyword-face) 203 247 (fontified t) 247 251 (fontified t face font-lock-keyword-face) 251 252 (fontified t) 252 254 (fontified t face font-lock-keyword-face) 254 298 (fontified t) 298 302 (fontified t face font-lock-keyword-face) 302 303 (fontified t) 303 305 (fontified t face font-lock-keyword-face) 305 349 (fontified t) 349 353 (fontified t face font-lock-keyword-face) 353 354 (fontified t) 354 356 (fontified t face font-lock-keyword-face) 356 400 (fontified t) 400 404 (fontified t face font-lock-keyword-face) 404 405 (fontified t) 405 407 (fontified t face font-lock-keyword-face) 407 451 (fontified t) 451 455 (fontified t face font-lock-keyword-face) 455 456 (fontified t) 456 458 (fontified t face font-lock-keyword-face) 458 502 (fontified t) 502 506 (fontified t face font-lock-keyword-face) 506 507 (fontified t) 507 509 (fontified t face font-lock-keyword-face) 509 553 (fontified t) 553 557 (fontified t face font-lock-keyword-face) 557 558 (fontified t) 558 560 (fontified t face font-lock-keyword-face) 560 605 (fontified t) 605 609 (fontified t face font-lock-keyword-face) 609 610 (fontified t) 610 612 (fontified t face font-lock-keyword-face) 612 657 (fontified t) 657 661 (fontified t face font-lock-keyword-face) 661 662 (fontified t) 662 664 (fontified t face font-lock-keyword-face) 664 709 (fontified t) 709 713 (fontified t face font-lock-keyword-face) 713 714 (fontified t) 714 716 (fontified t face font-lock-keyword-face) 716 761 (fontified t) 761 765 (fontified t face font-lock-keyword-face) 765 766 (fontified t) 766 768 (fontified t face font-lock-keyword-face) 768 813 (fontified t) 813 817 (fontified t face font-lock-keyword-face) 817 818 (fontified t) 818 820 (fontified t face font-lock-keyword-face) 820 865 (fontified t) 865 869 (fontified t face font-lock-keyword-face) 869 870 (fontified t) 870 872 (fontified t face font-lock-keyword-face) 872 917 (fontified t) 917 921 (fontified t face font-lock-keyword-face) 921 922 (fontified t) 922 924 (fontified t face font-lock-keyword-face) 924 969 (fontified t) 969 973 (fontified t face font-lock-keyword-face) 973 974 (fontified t) 974 976 (fontified t face font-lock-keyword-face) 976 1021 (fontified t) 1021 1025 (fontified t face font-lock-keyword-face) 1025 1043 (fontified t) 1043 1049 (fontified t face font-lock-keyword-face) 1049 1059 (fontified t)) . 18278) (undo-tree-id9 . -33) (undo-tree-id10 . -1059) (undo-tree-id11 . -1059) 19337) nil (25282 49855 585023 334000) 0 nil])
([nil nil ((nil rear-nonsticky nil 19336 . 19337) (nil fontified nil 19327 . 19337) (nil fontified nil 19321 . 19327) (nil fontified nil 19303 . 19321) (nil fontified nil 19299 . 19303) (nil fontified nil 19254 . 19299) (nil fontified nil 19252 . 19254) (nil fontified nil 19251 . 19252) (nil fontified nil 19247 . 19251) (nil fontified nil 19202 . 19247) (nil fontified nil 19200 . 19202) (nil fontified nil 19199 . 19200) (nil fontified nil 19195 . 19199) (nil fontified nil 19150 . 19195) (nil fontified nil 19148 . 19150) (nil fontified nil 19147 . 19148) (nil fontified nil 19143 . 19147) (nil fontified nil 19098 . 19143) (nil fontified nil 19096 . 19098) (nil fontified nil 19095 . 19096) (nil fontified nil 19091 . 19095) (nil fontified nil 19046 . 19091) (nil fontified nil 19044 . 19046) (nil fontified nil 19043 . 19044) (nil fontified nil 19039 . 19043) (nil fontified nil 18994 . 19039) (nil fontified nil 18992 . 18994) (nil fontified nil 18991 . 18992) (nil fontified nil 18987 . 18991) (nil fontified nil 18942 . 18987) (nil fontified nil 18940 . 18942) (nil fontified nil 18939 . 18940) (nil fontified nil 18935 . 18939) (nil fontified nil 18890 . 18935) (nil fontified nil 18888 . 18890) (nil fontified nil 18887 . 18888) (nil fontified nil 18883 . 18887) (nil fontified nil 18838 . 18883) (nil fontified nil 18836 . 18838) (nil fontified nil 18835 . 18836) (nil fontified nil 18831 . 18835) (nil fontified nil 18787 . 18831) (nil fontified nil 18785 . 18787) (nil fontified nil 18784 . 18785) (nil fontified nil 18780 . 18784) (nil fontified nil 18736 . 18780) (nil fontified nil 18734 . 18736) (nil fontified nil 18733 . 18734) (nil fontified nil 18729 . 18733) (nil fontified nil 18685 . 18729) (nil fontified nil 18683 . 18685) (nil fontified nil 18682 . 18683) (nil fontified nil 18678 . 18682) (nil fontified nil 18634 . 18678) (nil fontified nil 18632 . 18634) (nil fontified nil 18631 . 18632) (nil fontified nil 18627 . 18631) (nil fontified nil 18583 . 18627) (nil fontified nil 18581 . 18583) (nil fontified nil 18580 . 18581) (nil fontified nil 18576 . 18580) (nil fontified nil 18532 . 18576) (nil fontified nil 18530 . 18532) (nil fontified nil 18529 . 18530) (nil fontified nil 18525 . 18529) (nil fontified nil 18481 . 18525) (nil fontified nil 18479 . 18481) (nil fontified nil 18478 . 18479) (nil fontified nil 18474 . 18478) (nil fontified nil 18430 . 18474) (nil fontified nil 18428 . 18430) (nil fontified nil 18427 . 18428) (nil fontified nil 18423 . 18427) (nil fontified nil 18379 . 18423) (nil fontified nil 18377 . 18379) (nil fontified nil 18376 . 18377) (nil fontified nil 18372 . 18376) (nil fontified nil 18344 . 18372) (nil fontified nil 18342 . 18344) (nil fontified nil 18337 . 18342) (nil fontified nil 18332 . 18337) (nil fontified nil 18331 . 18332) (nil fontified nil 18330 . 18331) (nil fontified nil 18328 . 18330) (nil fontified nil 18323 . 18328) (nil fontified nil 18319 . 18323) (nil fontified nil 18318 . 18319) (nil fontified nil 18312 . 18318) (nil fontified nil 18311 . 18312) (nil fontified nil 18302 . 18311) (nil fontified nil 18301 . 18302) (nil fontified nil 18300 . 18301) (nil fontified nil 18299 . 18300) (nil fontified nil 18298 . 18299) (nil fontified nil 18281 . 18298) (nil fontified nil 18280 . 18281) (nil fontified nil 18279 . 18280) (nil fontified nil 18278 . 18279) (18278 . 19337)) nil (25282 49855 585019 63000) 0 nil])
([nil nil ((#("const double tauK = eta/(2.0*u_rms); " 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 11 (fontified t face font-lock-type-face) 11 12 (fontified t c-type c-decl-id-start face font-lock-type-face) 12 13 (fontified t) 13 17 (fontified t face font-lock-variable-name-face) 17 37 (fontified t)) . 5855) (undo-tree-id8 . -17)) nil (25282 49855 585011 56000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5891 . 5892) (nil fontified nil 5872 . 5892) (nil fontified nil 5868 . 5872) (nil fontified nil 5867 . 5868) (nil fontified nil 5866 . 5867) (nil fontified nil 5861 . 5866) (nil fontified nil 5860 . 5861) (nil fontified nil 5855 . 5860) (5855 . 5892)) nil (25282 49855 585009 671000) 0 nil])
([nil nil ((#("shape = Lambda*((cos(phi_0)*cos(phi_0)-sin(phi_0)*sin(phi_0))*(0.5*(a12+a21)) - a11*cos(phi_0)*sin(phi_0));
	      phi = phi_0 + dt*(omega_flow/2.0 + shape) + dist(generator)*rot_noise;
	    " 0 191 (fontified t)) . 12577) (undo-tree-id6 . -191) (undo-tree-id7 . -191) 12768) nil (25282 49855 585008 298000) 0 nil])
([nil nil ((nil rear-nonsticky nil 12767 . 12768) (nil fontified nil 12577 . 12768) (12577 . 12768)) nil (25282 49855 585006 190000) 0 nil])
([nil nil ((#("const double Lambda = 0.6;" 0 1 (c-is-sws t fontified t face font-lock-keyword-face) 1 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 11 (fontified t face font-lock-type-face) 11 12 (fontified t c-type c-decl-id-start face font-lock-type-face) 12 13 (fontified t) 13 19 (fontified t face font-lock-variable-name-face) 19 26 (fontified t)) . 6548) (undo-tree-id5 . -19)) nil (25282 49855 585005 242000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6573 . 6574) (nil fontified nil 6567 . 6574) (nil fontified nil 6561 . 6567) (nil fontified nil 6560 . 6561) (nil fontified nil 6559 . 6560) (nil fontified nil 6554 . 6559) (nil fontified nil 6553 . 6554) (nil fontified nil 6549 . 6553) (nil fontified nil 6548 . 6549) (6548 . 6574)) nil (25282 49855 585003 735000) 0 nil])
([nil nil ((#("	  R = -1.0*trSS*tauK*tauK;" 0 27 (fontified t)) . 14098) (undo-tree-id4 . -4)) nil (25282 49855 585002 175000) 0 nil])
([nil current ((nil rear-nonsticky nil 14124 . 14125) (nil fontified nil 14098 . 14125) (14098 . 14125)) nil (25282 49855 584990 969000) 0 nil])
nil
