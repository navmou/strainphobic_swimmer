(undo-tree-save-format-version . 1)
"16d52f69b0873ff0085d592e0e37f29b7e83d173"
[nil nil nil nil (25257 40117 288797 651000) 0 nil]
([nil nil ((3108 . 3109) (t 25257 36133 358228 0)) nil (25257 40117 288797 9000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3180 . 3181) (nil fontified nil 3109 . 3181) (3109 . 3181)) nil (25257 40117 288796 366000) 0 nil])
([nil nil ((#("double interpolate(double x, double y, triDvec &f , int field_ind);" 0 5 (fontified t face font-lock-type-face) 5 6 (fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (fontified t) 7 18 (fontified t face font-lock-function-name-face) 18 19 (fontified t c-type c-decl-arg-start) 19 25 (fontified t face font-lock-type-face) 25 26 (fontified t) 26 27 (fontified t face font-lock-variable-name-face) 27 28 (fontified t c-type c-decl-arg-start) 28 29 (fontified t) 29 35 (fontified t face font-lock-type-face) 35 36 (fontified t) 36 37 (fontified t face font-lock-variable-name-face) 37 38 (fontified t c-type c-decl-arg-start) 38 39 (fontified t) 39 46 (fontified t face font-lock-type-face) 46 48 (fontified t) 48 49 (fontified t face font-lock-variable-name-face) 49 50 (fontified t) 50 51 (fontified t c-type c-decl-arg-start) 51 52 (fontified t) 52 55 (fontified t face font-lock-type-face) 55 56 (fontified t) 56 65 (fontified t face font-lock-variable-name-face) 65 67 (fontified t)) . 3182) (undo-tree-id2 . -18)) nil (25257 40117 288795 460000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -3181) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 3182) nil (25257 40117 288792 719000) 0 nil])
([nil nil ((#("ux = interpolate(xmod,ymod,UXS,field_ind);
      uy = interpolate(xmod,ymod,UYS,field_ind);
      a11 = interpolate(xmod,ymod,A11S,field_ind);
      a12 = interpolate(xmod,ymod,A12S,field_ind);
      a21 = interpolate(xmod,ymod,A21S,field_ind);
      a22 = -a11;
      d2ux11 = interpolate(xmod,ymod,D2UX11S,field_ind);
      d2ux12 = interpolate(xmod,ymod,D2UX12S,field_ind);
      d2ux22 = interpolate(xmod,ymod,D2UX22S,field_ind);
      d2uy11 = interpolate(xmod,ymod,D2UY11S,field_ind);
      d2uy12 = -d2ux11;
      d2uy22 = -d2ux12;
" 0 539 (fontified t)) . -9797) (undo-tree-id3 . -16) (undo-tree-id4 . -539) (undo-tree-id5 . -539) 10336 (t 25257 40117 293380 200000)) nil (25257 40136 646957 7000) 0 nil])
([nil nil ((nil rear-nonsticky nil 10326 . 10327) (nil fontified nil 9797 . 10327) (9797 . 10327)) nil (25257 40136 646944 727000) 0 nil])
([nil nil ((#("ux = interpolate(xmod,ymod,UXS,field_ind);
	      uy = interpolate(xmod,ymod,UYS,field_ind);
	      a11 = interpolate(xmod,ymod,A11S,field_ind);
	      a12 = interpolate(xmod,ymod,A12S,field_ind);
	      a21 = interpolate(xmod,ymod,A21S,field_ind);
	      a22 = -a11;
	      d2ux11 = interpolate(xmod,ymod,D2UX11S,field_ind);
	      d2ux12 = interpolate(xmod,ymod,D2UX12S,field_ind);
	      d2ux22 = interpolate(xmod,ymod,D2UX22S,field_ind);
	      d2uy11 = interpolate(xmod,ymod,D2UY11S,field_ind);
	      d2uy12 = -d2ux11;
	      d2uy22 = -d2ux12;
	      " 0 557 (fontified t)) . -11917) (undo-tree-id11 . -16) (undo-tree-id12 . -557) (undo-tree-id13 . -557) 12474 (t 25257 40136 651153 100000)) nil (25257 40177 978946 275000) 0 nil])
([nil nil ((nil rear-nonsticky nil 12464 . 12465) (nil fontified nil 11917 . 12465) (11917 . 12465)) nil (25257 40177 978944 296000) 0 nil])
([nil nil ((#("
// BIILINEAR INTERPOLATION
double interpolate(double x, double y, triDvec &f , int field_ind)
{    
  int x0_ind , y0_ind;
  int x1_ind , y1_ind;
  double d1x , d2x , d1y , d2y;
  
  x0_ind =  floor(x/gridspace_x);
  if(x0_ind == nx-1)
    {
      x1_ind = 0;
      d1x = LX - x;
      d2x = x - gridx[x0_ind];
    }
  else
    {
      x1_ind = x0_ind+1;
      d1x = gridx[x1_ind] - x;
      d2x = x - gridx[x0_ind];
    }

  y0_ind =  floor(y/gridspace_y);
  if(y0_ind == ny-1)
    {
      y1_ind = 0;
      d1y = LY - y;
      d2y = y - gridy[y0_ind];
    }
  else
    {
      y1_ind = y0_ind+1;
      d1y = gridy[y1_ind] - y;
      d2y = y - gridy[y0_ind];
    }

  //calculate the time dependent flow around the swimmer position for interpolation
  //g00 = f[x0,y0] , g01 = f[x0,y1] , g10 = f[x1,y0] , g11 = f[x1,y1]
  double g00 , g01 , g10 , g11 ;
  g00 = f[field_ind][y0_ind][x0_ind];
  g10 = f[field_ind][y1_ind][x0_ind];
  g01 = f[field_ind][y0_ind][x1_ind];
  g11 = f[field_ind][y1_ind][x1_ind];
  
  double fxy1 = (((d1x)/gridspace_x) * g00) + (((d2x)/gridspace_x)*g10);
  double fxy2 = (((d1x)/gridspace_x) * g01) + (((d2x)/gridspace_x)*g11);

  double fxy = (((d1y)/gridspace_y) * fxy1) + (((d2y)/gridspace_y)*fxy2);
  
  return fxy;
}
" 0 1 (fontified t) 1 2 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 2 4 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 4 28 (c-in-sws t fontified t face font-lock-comment-face) 28 29 (c-is-sws t fontified t face font-lock-type-face) 29 33 (fontified t face font-lock-type-face) 33 34 (fontified t c-type c-decl-id-start face font-lock-type-face) 34 35 (fontified t) 35 46 (fontified t face font-lock-function-name-face) 46 47 (fontified t c-type c-decl-arg-start) 47 53 (fontified t face font-lock-type-face) 53 54 (fontified t) 54 55 (fontified t face font-lock-variable-name-face) 55 56 (fontified t c-type c-decl-arg-start) 56 57 (fontified t) 57 63 (fontified t face font-lock-type-face) 63 64 (fontified t) 64 65 (fontified t face font-lock-variable-name-face) 65 66 (fontified t c-type c-decl-arg-start) 66 67 (fontified t) 67 74 (fontified t face font-lock-type-face) 74 76 (fontified t) 76 77 (fontified t face font-lock-variable-name-face) 77 78 (fontified t) 78 79 (fontified t c-type c-decl-arg-start) 79 80 (fontified t) 80 83 (fontified t face font-lock-type-face) 83 84 (fontified t) 84 93 (fontified t face font-lock-variable-name-face) 93 103 (fontified t) 103 105 (fontified t face font-lock-type-face) 105 106 (fontified t c-type c-decl-id-start face font-lock-type-face) 106 107 (fontified t) 107 113 (fontified t face font-lock-variable-name-face) 113 114 (fontified t) 114 115 (fontified t c-type c-decl-id-start) 115 116 (fontified t) 116 122 (fontified t face font-lock-variable-name-face) 122 126 (fontified t) 126 128 (fontified t face font-lock-type-face) 128 129 (fontified t c-type c-decl-id-start face font-lock-type-face) 129 130 (fontified t) 130 136 (fontified t face font-lock-variable-name-face) 136 137 (fontified t) 137 138 (fontified t c-type c-decl-id-start) 138 139 (fontified t) 139 145 (fontified t face font-lock-variable-name-face) 145 149 (fontified t) 149 154 (fontified t face font-lock-type-face) 154 155 (fontified t c-type c-decl-id-start face font-lock-type-face) 155 156 (fontified t) 156 159 (fontified t face font-lock-variable-name-face) 159 160 (fontified t) 160 161 (fontified t c-type c-decl-id-start) 161 162 (fontified t) 162 165 (fontified t face font-lock-variable-name-face) 165 166 (fontified t) 166 167 (fontified t c-type c-decl-id-start) 167 168 (fontified t) 168 171 (fontified t face font-lock-variable-name-face) 171 172 (fontified t) 172 173 (fontified t c-type c-decl-id-start) 173 174 (fontified t) 174 177 (fontified t face font-lock-variable-name-face) 177 218 (fontified t) 218 220 (fontified t face font-lock-keyword-face) 220 320 (fontified t) 320 324 (fontified t face font-lock-keyword-face) 324 461 (fontified t) 461 463 (fontified t face font-lock-keyword-face) 463 563 (fontified t) 563 567 (fontified t face font-lock-keyword-face) 567 668 (fontified t) 668 670 (c-in-sws t c-is-sws t fontified t) 670 671 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 671 672 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 672 752 (c-in-sws t fontified t face font-lock-comment-face) 752 754 (c-in-sws t fontified t) 754 756 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 756 822 (c-in-sws t fontified t face font-lock-comment-face) 822 824 (c-is-sws t c-in-sws t fontified t) 824 825 (c-is-sws t fontified t face font-lock-type-face) 825 829 (fontified t face font-lock-type-face) 829 830 (fontified t c-type c-decl-id-start face font-lock-type-face) 830 831 (fontified t) 831 834 (fontified t face font-lock-variable-name-face) 834 835 (fontified t) 835 836 (fontified t c-type c-decl-id-start) 836 837 (fontified t) 837 840 (fontified t face font-lock-variable-name-face) 840 841 (fontified t) 841 842 (fontified t c-type c-decl-id-start) 842 843 (fontified t) 843 846 (fontified t face font-lock-variable-name-face) 846 847 (fontified t) 847 848 (fontified t c-type c-decl-id-start) 848 849 (fontified t) 849 852 (fontified t face font-lock-variable-name-face) 852 1012 (fontified t) 1012 1017 (fontified t face font-lock-type-face) 1017 1018 (fontified t c-type c-decl-id-start face font-lock-type-face) 1018 1019 (fontified t) 1019 1023 (fontified t face font-lock-variable-name-face) 1023 1085 (fontified t) 1085 1090 (fontified t face font-lock-type-face) 1090 1091 (fontified t c-type c-decl-id-start face font-lock-type-face) 1091 1092 (fontified t) 1092 1096 (fontified t face font-lock-variable-name-face) 1096 1159 (fontified t) 1159 1164 (fontified t face font-lock-type-face) 1164 1165 (fontified t c-type c-decl-id-start face font-lock-type-face) 1165 1166 (fontified t) 1166 1169 (fontified t face font-lock-variable-name-face) 1169 1236 (fontified t) 1236 1242 (fontified t face font-lock-keyword-face) 1242 1250 (fontified t)) . -19513) (undo-tree-id6 . -147) (undo-tree-id7 . -46) (undo-tree-id8 . -1250) (undo-tree-id9 . -1250) (undo-tree-id10 . -1250) 20763) nil (25257 40177 978943 30000) 0 nil])
([nil nil ((nil rear-nonsticky nil 20897 . 20898) (nil fontified nil 19542 . 20898) (nil fontified nil 19541 . 19542) (nil fontified nil 19515 . 19541) (nil fontified nil 19514 . 19515) (nil fontified nil 19513 . 19514) (19513 . 20898)) nil (25257 40177 978930 637000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -6858) (undo-tree-id15 . -1) (#("/" 0 1 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -6859) (undo-tree-id16 . -1) 6860 (t 25257 40177 983296 400000)) nil (25257 44905 983011 126000) 0 nil])
([nil nil ((#("twoDvec A = generate_As(sigma , tau , n_time_steps , dt);" 0 6 (fontified t face font-lock-type-face) 6 7 (fontified t c-type c-decl-id-start face font-lock-type-face) 7 8 (fontified t) 8 9 (fontified t face font-lock-variable-name-face) 9 57 (fontified t)) . 6858) (undo-tree-id14 . -23)) nil (25257 44905 983006 904000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6914 . 6915) (nil fontified nil 6867 . 6915) (nil fontified nil 6866 . 6867) (nil fontified nil 6865 . 6866) (nil fontified nil 6864 . 6865) (nil fontified nil 6858 . 6864) (6858 . 6915) (t 25257 44905 986858 900000)) nil (25257 44929 420991 808000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -6894) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#(" " 0 1 (fontified t)) . -6895) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("n" 0 1 (fontified t)) . -6896) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (#("_" 0 1 (fontified t)) . -6897) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (#("t" 0 1 (fontified t)) . -6898) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("i" 0 1 (fontified t)) . -6899) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#("m" 0 1 (fontified t)) . -6900) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (#("e" 0 1 (fontified t)) . -6901) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("_" 0 1 (fontified t)) . -6902) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("s" 0 1 (fontified t)) . -6903) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (#("t" 0 1 (fontified t)) . -6904) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("e" 0 1 (fontified t)) . -6905) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (#("p" 0 1 (fontified t)) . -6906) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (#("s" 0 1 (fontified t)) . -6907) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (#(" " 0 1 (fontified t)) . -6908) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (#("," 0 1 (fontified t)) . -6909) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (#(" " 0 1 (fontified nil)) . -6910) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#("d" 0 1 (fontified nil)) . -6911) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#("t" 0 1 (fontified t)) . -6912) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#(")" 0 1 (fontified t)) . -6913) (undo-tree-id132 . -1) (undo-tree-id133 . 1) (undo-tree-id134 . -1) (#(";" 0 1 (fontified t rear-nonsticky t)) . -6914) (undo-tree-id135 . -1) 6915) nil (25257 44929 420989 2000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -6873) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("r" 0 1 (fontified t)) . -6874) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("a" 0 1 (fontified t)) . -6875) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#("t" 0 1 (fontified t)) . -6876) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("e" 0 1 (fontified t)) . -6877) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("_" 0 1 (fontified t)) . -6878) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("A" 0 1 (fontified t)) . -6879) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#("s" 0 1 (fontified t)) . -6880) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("(" 0 1 (fontified t)) . -6881) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . 1) (undo-tree-id69 . -1) (#("s" 0 1 (fontified t)) . -6882) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("i" 0 1 (fontified t)) . -6883) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("g" 0 1 (fontified t)) . -6884) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("m" 0 1 (fontified t)) . -6885) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("a" 0 1 (fontified t)) . -6886) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (#(" " 0 1 (fontified t)) . -6887) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#("," 0 1 (fontified t)) . -6888) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#(" " 0 1 (fontified t)) . -6889) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("t" 0 1 (fontified t)) . -6890) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (#("a" 0 1 (fontified t)) . -6891) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (#("u" 0 1 (fontified t)) . -6892) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#(" " 0 1 (fontified t)) . -6893) (undo-tree-id92 . -1) (undo-tree-id93 . -1) 6894) nil (25257 44929 420955 945000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6867) (undo-tree-id26 . -1) (#("=" 0 1 (fontified t)) . -6868) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#(" " 0 1 (fontified t)) . -6869) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("g" 0 1 (fontified t)) . -6870) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("e" 0 1 (fontified t)) . -6871) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("n" 0 1 (fontified t)) . -6872) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) 6873) nil (25257 44929 420930 807000) 0 nil])
([nil nil ((6867 . 6868)) nil (25257 44929 420922 984000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 8565) (#("%" 0 1 (fontified t)) . 8565) (#(")" 0 1 (fontified t)) . 8565) (#("(" 0 1 (fontified t)) . 8565) (#("d" 0 1 (fontified t)) . 8565) (#("n" 0 1 (fontified t)) . 8565) (#("a" 0 1 (fontified t face font-lock-keyword-face)) . 8565) (#("r" 0 1 (fontified t)) . 8565) (#(" " 0 1 (fontified t)) . 8565) (#("=" 0 1 (fontified t)) . 8565) (#(" " 0 1 (fontified t)) . 8565) (#("d" 0 1 (fontified t)) . 8565) (#("n" 0 1 (fontified t)) . 8565) (#("i" 0 1 (fontified t)) . 8565) (#("_" 0 1 (fontified t)) . 8565) (#("d" 0 1 (fontified t)) . 8565) (#("l" 0 1 (fontified t)) . 8565) (#("e" 0 1 (fontified t)) . 8565) (#("i" 0 1 (fontified t)) . 8565) (#("f" 0 1 (fontified t)) . 8565)) nil (25257 44929 420921 26000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . 8565) (#("s" 0 1 (fontified t)) . 8565) (#("d" 0 1 (fontified t)) . 8565) (#("l" 0 1 (fontified t)) . 8565) (#("e" 0 1 (fontified t)) . 8565) (#("i" 0 1 (fontified t)) . 8565) (#("f" 0 1 (fontified t)) . 8565) (#("_" 0 1 (fontified t)) . 8565)) nil (25257 44929 420919 143000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8621 . 8622) (nil fontified nil 8574 . 8622) (nil fontified nil 8573 . 8574) (nil fontified nil 8572 . 8573) (nil fontified nil 8571 . 8572) (nil fontified nil 8565 . 8571) (8565 . 8622)) nil (25257 44929 420918 158000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -8565) (undo-tree-id17 . -1) (undo-tree-id18 . 1) (#("w" 0 1 (fontified t)) . -8566) (undo-tree-id19 . -1) (#("o" 0 1 (fontified t)) . -8567) (undo-tree-id20 . -1) (#("D" 0 1 (fontified t)) . -8568) (undo-tree-id21 . -1) (#("v" 0 1 (fontified t)) . -8569) (undo-tree-id22 . -1) (#("e" 0 1 (fontified t)) . -8570) (undo-tree-id23 . -1) (#("c" 0 1 (fontified t)) . -8571) (undo-tree-id24 . -1) (#(" " 0 1 (fontified t)) . -8572) (undo-tree-id25 . -1) 8573) nil (25257 44929 420914 766000) 0 nil])
([nil nil ((8558 . 8565) (t 25257 44929 424616 700000)) nil (25257 44943 126278 360000) 0 nil])
([nil nil ((8565 . 8566)) nil (25257 44943 126277 770000) 0 nil])
([nil nil ((8566 . 8567)) nil (25257 44943 126277 261000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -8566) (undo-tree-id136 . -1) 8567) nil (25257 44943 126276 504000) 0 nil])
([nil nil ((8566 . 8572)) nil (25257 44943 126269 28000) 0 nil])
([nil nil ((8572 . 8574)) nil (25257 44943 126268 345000) 0 nil])
([nil nil ((8574 . 8575)) nil (25257 44943 126264 865000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 15411) (#(")" 0 1 (fontified t)) . 15411) (#("s" 0 1 (fontified t)) . 15411) (#("d" 0 1 (fontified t)) . 15411) (#("l" 0 1 (fontified t)) . 15411) (#("e" 0 1 (fontified t)) . 15411) (#("i" 0 1 (fontified t)) . 15411) (#("f" 0 1 (fontified t)) . 15411) (#("_" 0 1 (fontified t)) . 15411) (#("n" 0 1 (fontified t)) . 15411) (#("/" 0 1 (fontified t)) . 15411) (#("0" 0 1 (fontified t)) . 15411) (#("." 0 1 (fontified t)) . 15411) (#("1" 0 1 (fontified t)) . 15411) (#("(" 0 1 (fontified t)) . 15411) (undo-tree-id141 . 1) (undo-tree-id142 . -1) (t 25257 44943 130056 900000)) nil (25257 45349 560342 930000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -15408) (undo-tree-id138 . -1) (#(" " 0 1 (fontified t)) . -15409) (undo-tree-id139 . -1) (#("(" 0 1 (fontified t)) . -15410) (undo-tree-id140 . -1) 15411) nil (25257 45349 560338 860000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 15421) (undo-tree-id137 . -1)) nil (25257 45349 560334 381000) 0 nil])
([nil nil ((#("int steady_A = 500;" 0 2 (fontified t face font-lock-type-face) 2 3 (fontified t c-type c-decl-id-start face font-lock-type-face) 3 4 (fontified t) 4 12 (fontified t face font-lock-variable-name-face) 12 19 (fontified t)) . 4134) (undo-tree-id145 . -19) (t 25257 45349 564978 200000)) nil (25257 45386 14484 237000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4133) (undo-tree-id143 . -1) (undo-tree-id144 . -1) 4134) nil (25257 45386 14481 264000) 0 nil])
([nil nil ((4461 . 4462) (t 25257 45386 18522 800000)) nil (25257 45392 962672 805000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4480 . 4481) (nil fontified nil 4474 . 4481) (nil fontified nil 4466 . 4474) (nil fontified nil 4465 . 4466) (nil fontified nil 4464 . 4465) (nil fontified nil 4462 . 4464) (4462 . 4481)) nil (25257 45392 962669 649000) 0 nil])
([nil nil ((4477 . 4480) (t 25257 45392 966907 700000)) nil (25257 45418 314612 530000) 0 nil])
([nil nil ((4480 . 4481)) nil (25257 45418 314612 36000) 0 nil])
([nil nil ((4477 . 4478)) nil (25257 45418 314611 660000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 4482) (#("0" 0 1 (fontified t)) . 4482) (#("5" 0 1 (fontified t)) . 4482)) nil (25257 45418 314610 471000) 0 nil])
([nil nil ((4482 . 4484)) nil (25257 45418 314609 739000) 0 nil])
([nil nil ((4483 . 4484)) nil (25257 45418 314609 148000) 0 nil])
([nil nil ((4484 . 4485)) nil (25257 45418 314608 632000) 0 nil])
([nil nil ((4485 . 4488)) nil (25257 45418 314608 191000) 0 nil])
([nil nil ((4488 . 4489)) nil (25257 45418 314607 310000) 0 nil])
([nil nil ((4489 . 4491)) nil (25257 45418 314606 398000) 0 nil])
([nil nil ((4484 . 4486)) nil (25257 45418 314602 981000) 0 nil])
([nil nil ((#("
//STATE EVALUATION
int GET_STATE(double local_grad , double TrSS , double py){
  int state;
  if(TrSS < trSS_threshold)
    {
      if(local_grad < -grad_threshold)
	{
	  if(py < -py_threshold){state = 0;}
	  else if(local_grad > py_threshold){ state = 2;}
	  else{state = 1;}
	}
      else if(local_grad > grad_threshold)
	{
	  if(py < -py_threshold){state = 3;}
	  else if(local_grad > py_threshold){ state = 5;}
	  else{state = 4;}
	}
      else
	{
	  if(py < -py_threshold){state = 6;}
	  else if(local_grad > py_threshold){ state = 8;}
	  else{state = 7;}
	}
    }
  else
        {
      if(local_grad < -grad_threshold)
	{
	  if(py < -py_threshold){state = 9;}
	  else if(local_grad > py_threshold){ state = 11;}
	  else{state = 10;}
	}
      else if(local_grad > grad_threshold)
	{
	  if(py < -py_threshold){state = 12;}
	  else if(local_grad > py_threshold){ state = 4;}
	  else{state = 13;}
	}
      else
	{
	  if(py < -py_threshold){state = 15;}
	  else if(local_grad > py_threshold){ state = 17;}
	  else{state = 16;}
	}
    }
  return state;
}

" 0 1 (fontified t) 1 2 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 2 3 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 3 20 (c-in-sws t face font-lock-comment-face fontified t) 20 21 (face font-lock-type-face c-is-sws t fontified t) 21 22 (face font-lock-type-face fontified t) 22 23 (face font-lock-type-face c-type c-decl-id-start fontified t) 23 24 (fontified t) 24 33 (face font-lock-function-name-face fontified t) 33 34 (c-type c-decl-arg-start fontified t) 34 40 (face font-lock-type-face fontified t) 40 41 (fontified t) 41 51 (face font-lock-variable-name-face fontified t) 51 52 (fontified t) 52 53 (c-type c-decl-arg-start fontified t) 53 54 (fontified t) 54 60 (face font-lock-type-face fontified t) 60 61 (fontified t) 61 65 (face font-lock-variable-name-face fontified t) 65 66 (fontified t) 66 67 (c-type c-decl-arg-start fontified t) 67 68 (fontified t) 68 74 (face font-lock-type-face fontified t) 74 75 (fontified t) 75 77 (face font-lock-variable-name-face fontified t) 77 82 (fontified t) 82 84 (face font-lock-type-face fontified t) 84 85 (face font-lock-type-face c-type c-decl-id-start fontified t) 85 86 (fontified t) 86 91 (face font-lock-variable-name-face fontified t) 91 95 (fontified t) 95 97 (face font-lock-keyword-face fontified t) 97 133 (fontified t) 133 135 (face font-lock-keyword-face fontified t) 135 172 (fontified t) 172 174 (face font-lock-keyword-face fontified t) 174 210 (fontified t) 210 214 (face font-lock-keyword-face fontified t) 214 215 (fontified t) 215 217 (face font-lock-keyword-face fontified t) 217 261 (fontified t) 261 265 (face font-lock-keyword-face fontified t) 265 287 (fontified t) 287 291 (face font-lock-keyword-face fontified t) 291 292 (fontified t) 292 294 (face font-lock-keyword-face fontified t) 294 330 (fontified t) 330 332 (face font-lock-keyword-face fontified t) 332 368 (fontified t) 368 372 (face font-lock-keyword-face fontified t) 372 373 (fontified t) 373 375 (face font-lock-keyword-face fontified t) 375 419 (fontified t) 419 423 (face font-lock-keyword-face fontified t) 423 445 (fontified t) 445 449 (face font-lock-keyword-face fontified t) 449 456 (fontified t) 456 458 (face font-lock-keyword-face fontified t) 458 494 (fontified t) 494 498 (face font-lock-keyword-face fontified t) 498 499 (fontified t) 499 501 (face font-lock-keyword-face fontified t) 501 545 (fontified t) 545 549 (face font-lock-keyword-face fontified t) 549 573 (fontified t) 573 577 (face font-lock-keyword-face fontified t) 577 594 (fontified t) 594 596 (face font-lock-keyword-face fontified t) 596 633 (fontified t) 633 635 (face font-lock-keyword-face fontified t) 635 671 (fontified t) 671 675 (face font-lock-keyword-face fontified t) 675 676 (fontified t) 676 678 (face font-lock-keyword-face fontified t) 678 723 (fontified t) 723 727 (face font-lock-keyword-face fontified t) 727 750 (fontified t) 750 754 (face font-lock-keyword-face fontified t) 754 755 (fontified t) 755 757 (face font-lock-keyword-face fontified t) 757 793 (fontified t) 793 795 (face font-lock-keyword-face fontified t) 795 832 (fontified t) 832 836 (face font-lock-keyword-face fontified t) 836 837 (fontified t) 837 839 (face font-lock-keyword-face fontified t) 839 883 (fontified t) 883 887 (face font-lock-keyword-face fontified t) 887 910 (fontified t) 910 914 (face font-lock-keyword-face fontified t) 914 921 (fontified t) 921 923 (face font-lock-keyword-face fontified t) 923 960 (fontified t) 960 964 (face font-lock-keyword-face fontified t) 964 965 (fontified t) 965 967 (face font-lock-keyword-face fontified t) 967 1012 (fontified t) 1012 1016 (face font-lock-keyword-face fontified t) 1016 1041 (fontified t) 1041 1047 (face font-lock-keyword-face fontified t) 1047 1058 (fontified t)) . -17206) (undo-tree-id0 . -1058) (undo-tree-id1 . -1058) 18264 (t 25257 45418 319066 0)) nil (25258 5167 379494 208000) 0 nil])
([nil nil ((nil rear-nonsticky nil 18259 . 18260) (nil fontified nil 17227 . 18260) (nil fontified nil 17226 . 17227) (nil fontified nil 17208 . 17226) (nil fontified nil 17207 . 17208) (nil fontified nil 17206 . 17207) (17206 . 18260)) nil (25258 5167 379476 403000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . 17764) (t 25258 5167 385177 400000)) nil (25258 5339 347167 21000) 0 nil])
([nil nil ((17764 . 17765)) nil (25258 5339 347166 292000) 0 nil])
([nil nil ((#("4" 0 1 (fontified t)) . 17744)) nil (25258 5339 347165 235000) 0 nil])
([nil nil ((17744 . 17745)) nil (25258 5339 347161 888000) 0 nil])
([nil nil ((#("
//STATE EVALUATION
int GET_STATE(double local_grad , double TrSS , double py){
  int state;
  if(TrSS < trSS_threshold)
    {
      if(local_grad < -grad_threshold)
	{
	  if(py < -py_threshold){state = 0;}
	  else if(local_grad > py_threshold){ state = 2;}
	  else{state = 1;}
	}
      else if(local_grad > grad_threshold)
	{
	  if(py < -py_threshold){state = 6;}
	  else if(local_grad > py_threshold){ state = 8;}
	  else{state = 7;}
	}
      else
	{
	  if(py < -py_threshold){state = 3;}
	  else if(local_grad > py_threshold){ state = 5;}
	  else{state = 4;}
	}
    }
  else
    {
      if(local_grad < -grad_threshold)
	{
	  if(py < -py_threshold){state = 9;}
	  else if(local_grad > py_threshold){ state = 11;}
	  else{state = 10;}
	}
      else if(local_grad > grad_threshold)
	{
	  if(py < -py_threshold){state = 15;}
	  else if(local_grad > py_threshold){ state = 17;}
	  else{state = 16;}
	}
      else
	{
	  if(py < -py_threshold){state = 12;}
	  else if(local_grad > py_threshold){ state = 14;}
	  else{state = 13;}
	}
    }
  return state;
}
" 0 1 (fontified t) 1 2 (c-in-sws t face font-lock-comment-delimiter-face fontified t c-is-sws t) 2 3 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 3 20 (c-in-sws t face font-lock-comment-face fontified t) 20 21 (face font-lock-type-face fontified t c-is-sws t) 21 22 (face font-lock-type-face fontified t) 22 23 (face font-lock-type-face c-type c-decl-id-start fontified t) 23 24 (fontified t) 24 33 (face font-lock-function-name-face fontified t) 33 34 (c-type c-decl-arg-start fontified t) 34 40 (face font-lock-type-face fontified t) 40 41 (fontified t) 41 51 (face font-lock-variable-name-face fontified t) 51 52 (fontified t) 52 53 (c-type c-decl-arg-start fontified t) 53 54 (fontified t) 54 60 (face font-lock-type-face fontified t) 60 61 (fontified t) 61 65 (face font-lock-variable-name-face fontified t) 65 66 (fontified t) 66 67 (c-type c-decl-arg-start fontified t) 67 68 (fontified t) 68 74 (face font-lock-type-face fontified t) 74 75 (fontified t) 75 77 (face font-lock-variable-name-face fontified t) 77 82 (fontified t) 82 84 (face font-lock-type-face fontified t) 84 85 (face font-lock-type-face c-type c-decl-id-start fontified t) 85 86 (fontified t) 86 91 (face font-lock-variable-name-face fontified t) 91 95 (fontified t) 95 97 (face font-lock-keyword-face fontified t) 97 133 (fontified t) 133 135 (face font-lock-keyword-face fontified t) 135 172 (fontified t) 172 174 (face font-lock-keyword-face fontified t) 174 210 (fontified t) 210 214 (face font-lock-keyword-face fontified t) 214 215 (fontified t) 215 217 (face font-lock-keyword-face fontified t) 217 261 (fontified t) 261 265 (face font-lock-keyword-face fontified t) 265 287 (fontified t) 287 291 (face font-lock-keyword-face fontified t) 291 292 (fontified t) 292 294 (face font-lock-keyword-face fontified t) 294 330 (fontified t) 330 332 (face font-lock-keyword-face fontified t) 332 368 (fontified t) 368 372 (face font-lock-keyword-face fontified t) 372 373 (fontified t) 373 375 (face font-lock-keyword-face fontified t) 375 419 (fontified t) 419 423 (face font-lock-keyword-face fontified t) 423 445 (fontified t) 445 449 (face font-lock-keyword-face fontified t) 449 456 (fontified t) 456 458 (face font-lock-keyword-face fontified t) 458 491 (fontified t) 491 494 (fontified t) 494 498 (face font-lock-keyword-face fontified t) 498 499 (fontified t) 499 501 (face font-lock-keyword-face fontified t) 501 538 (fontified t) 538 539 (fontified t) 539 542 (fontified t) 542 545 (fontified t) 545 549 (face font-lock-keyword-face fontified t) 549 558 (fontified t) 558 559 (fontified t) 559 562 (fontified t) 562 573 (fontified t) 573 577 (face font-lock-keyword-face fontified t) 577 590 (fontified t) 590 592 (face font-lock-keyword-face fontified t) 592 629 (fontified t) 629 631 (face font-lock-keyword-face fontified t) 631 667 (fontified t) 667 671 (face font-lock-keyword-face fontified t) 671 672 (fontified t) 672 674 (face font-lock-keyword-face fontified t) 674 719 (fontified t) 719 723 (face font-lock-keyword-face fontified t) 723 746 (fontified t) 746 750 (face font-lock-keyword-face fontified t) 750 751 (fontified t) 751 753 (face font-lock-keyword-face fontified t) 753 789 (fontified t) 789 791 (face font-lock-keyword-face fontified t) 791 828 (fontified t) 828 832 (face font-lock-keyword-face fontified t) 832 833 (fontified t) 833 835 (face font-lock-keyword-face fontified t) 835 880 (fontified t) 880 884 (face font-lock-keyword-face fontified t) 884 907 (fontified t) 907 911 (face font-lock-keyword-face fontified t) 911 918 (fontified t) 918 920 (face font-lock-keyword-face fontified t) 920 957 (fontified t) 957 961 (face font-lock-keyword-face fontified t) 961 962 (fontified t) 962 964 (face font-lock-keyword-face fontified t) 964 1009 (fontified t) 1009 1013 (face font-lock-keyword-face fontified t) 1013 1038 (fontified t) 1038 1044 (face font-lock-keyword-face fontified t) 1044 1053 (fontified t) 1053 1054 (fontified t rear-nonsticky t)) . 17206) (undo-tree-id2 . -1054) (undo-tree-id3 . -558) (undo-tree-id4 . -1054) (undo-tree-id5 . -1054) (undo-tree-id6 . -1054) 18260 (t 25258 5339 351706 300000)) nil (25258 5347 12708 671000) 0 nil])
([nil nil ((nil fontified nil 18259 . 18260) (nil fontified nil 18250 . 18259) (nil fontified nil 18244 . 18250) (nil fontified nil 18219 . 18244) (nil fontified nil 18215 . 18219) (nil fontified nil 18170 . 18215) (nil fontified nil 18168 . 18170) (nil fontified nil 18167 . 18168) (nil fontified nil 18163 . 18167) (nil fontified nil 18126 . 18163) (nil fontified nil 18124 . 18126) (nil fontified nil 18117 . 18124) (nil fontified nil 18113 . 18117) (nil fontified nil 18090 . 18113) (nil fontified nil 18086 . 18090) (nil fontified nil 18041 . 18086) (nil fontified nil 18039 . 18041) (nil fontified nil 18038 . 18039) (nil fontified nil 18034 . 18038) (nil fontified nil 17997 . 18034) (nil fontified nil 17995 . 17997) (nil fontified nil 17959 . 17995) (nil fontified nil 17957 . 17959) (nil fontified nil 17956 . 17957) (nil fontified nil 17952 . 17956) (nil fontified nil 17929 . 17952) (nil fontified nil 17925 . 17929) (nil fontified nil 17880 . 17925) (nil fontified nil 17878 . 17880) (nil fontified nil 17877 . 17878) (nil fontified nil 17873 . 17877) (nil fontified nil 17837 . 17873) (nil fontified nil 17835 . 17837) (nil fontified nil 17798 . 17835) (nil fontified nil 17796 . 17798) (nil fontified nil 17783 . 17796) (nil fontified nil 17779 . 17783) (nil fontified nil 17768 . 17779) (nil fontified nil 17765 . 17768) (nil fontified nil 17764 . 17765) (nil fontified nil 17755 . 17764) (nil fontified nil 17751 . 17755) (nil fontified nil 17748 . 17751) (nil fontified nil 17745 . 17748) (nil fontified nil 17744 . 17745) (nil fontified nil 17707 . 17744) (nil fontified nil 17705 . 17707) (nil fontified nil 17704 . 17705) (nil fontified nil 17700 . 17704) (nil fontified nil 17697 . 17700) (nil fontified nil 17664 . 17697) (nil fontified nil 17662 . 17664) (nil fontified nil 17655 . 17662) (nil fontified nil 17651 . 17655) (nil fontified nil 17629 . 17651) (nil fontified nil 17625 . 17629) (nil fontified nil 17581 . 17625) (nil fontified nil 17579 . 17581) (nil fontified nil 17578 . 17579) (nil fontified nil 17574 . 17578) (nil fontified nil 17538 . 17574) (nil fontified nil 17536 . 17538) (nil fontified nil 17500 . 17536) (nil fontified nil 17498 . 17500) (nil fontified nil 17497 . 17498) (nil fontified nil 17493 . 17497) (nil fontified nil 17471 . 17493) (nil fontified nil 17467 . 17471) (nil fontified nil 17423 . 17467) (nil fontified nil 17421 . 17423) (nil fontified nil 17420 . 17421) (nil fontified nil 17416 . 17420) (nil fontified nil 17380 . 17416) (nil fontified nil 17378 . 17380) (nil fontified nil 17341 . 17378) (nil fontified nil 17339 . 17341) (nil fontified nil 17303 . 17339) (nil fontified nil 17301 . 17303) (nil fontified nil 17297 . 17301) (nil fontified nil 17292 . 17297) (nil fontified nil 17291 . 17292) (nil fontified nil 17290 . 17291) (nil fontified nil 17288 . 17290) (nil fontified nil 17283 . 17288) (nil fontified nil 17281 . 17283) (nil fontified nil 17280 . 17281) (nil fontified nil 17274 . 17280) (nil fontified nil 17273 . 17274) (nil fontified nil 17272 . 17273) (nil fontified nil 17271 . 17272) (nil fontified nil 17267 . 17271) (nil fontified nil 17266 . 17267) (nil fontified nil 17260 . 17266) (nil fontified nil 17259 . 17260) (nil fontified nil 17258 . 17259) (nil fontified nil 17257 . 17258) (nil fontified nil 17247 . 17257) (nil fontified nil 17246 . 17247) (nil fontified nil 17240 . 17246) (nil fontified nil 17239 . 17240) (nil fontified nil 17230 . 17239) (nil fontified nil 17229 . 17230) (nil fontified nil 17228 . 17229) (nil fontified nil 17227 . 17228) (nil fontified nil 17226 . 17227) (nil fontified nil 17209 . 17226) (nil fontified nil 17208 . 17209) (nil fontified nil 17207 . 17208) (nil fontified nil 17206 . 17207) (17206 . 18260)) nil (25258 5347 12696 794000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . 17424) (#("a" 0 1 (fontified t)) . 17424) (#("c" 0 1 (fontified t)) . 17424) (#("o" 0 1 (fontified t)) . 17424) (#("l" 0 1 (fontified t)) . 17424) (t 25258 5347 17026 500000)) nil (25259 10745 349119 759000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 17424) (#("a" 0 1 (fontified t)) . 17424) (#("r" 0 1 (fontified t)) . 17424) (#("g" 0 1 (fontified t)) . 17424) (#("_" 0 1 (fontified t)) . 17424)) nil (25259 10745 349118 793000) 0 nil])
([nil nil ((17424 . 17426)) nil (25259 10745 349117 658000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -17424) (undo-tree-id0 . -1) (#("y" 0 1 (fontified t)) . -17425) (undo-tree-id1 . -1) 17426) nil (25259 10745 349117 0) 0 nil])
([nil nil ((17424 . 17426)) nil (25259 10745 349100 455000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 17574) (#("a" 0 1 (fontified t)) . 17574) (#("r" 0 1 (fontified t)) . 17574) (#("g" 0 1 (fontified t)) . 17574) (#("_" 0 1 (fontified t)) . 17574) (#("l" 0 1 (fontified t)) . 17574) (#("a" 0 1 (fontified t)) . 17574) (#("c" 0 1 (fontified t)) . 17574) (#("o" 0 1 (fontified t)) . 17574) (#("l" 0 1 (fontified t)) . 17574)) nil (25259 10745 349099 571000) 0 nil])
([nil nil ((17574 . 17576)) nil (25259 10745 349098 358000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 17692) (#("a" 0 1 (fontified t)) . 17692) (#("r" 0 1 (fontified t)) . 17692) (#("g" 0 1 (fontified t)) . 17692) (#("_" 0 1 (fontified t)) . 17692) (#("l" 0 1 (fontified t)) . 17692) (#("a" 0 1 (fontified t)) . 17692) (#("c" 0 1 (fontified t)) . 17692) (#("o" 0 1 (fontified t)) . 17692) (#("l" 0 1 (fontified t)) . 17692)) nil (25259 10745 349097 168000) 0 nil])
([nil nil ((17692 . 17694)) nil (25259 10745 349095 302000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 17857) (#("a" 0 1 (fontified t)) . 17857) (#("r" 0 1 (fontified t)) . 17857) (#("g" 0 1 (fontified t)) . 17857) (#("_" 0 1 (fontified t)) . 17857) (#("l" 0 1 (fontified t)) . 17857) (#("a" 0 1 (fontified t)) . 17857) (#("c" 0 1 (fontified t)) . 17857) (#("o" 0 1 (fontified t)) . 17857) (#("l" 0 1 (fontified t)) . 17857)) nil (25259 10745 349094 0) 0 nil])
([nil nil ((17857 . 17859)) nil (25259 10745 349092 83000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 18010) (#("a" 0 1 (fontified t)) . 18010) (#("r" 0 1 (fontified t)) . 18010) (#("g" 0 1 (fontified t)) . 18010) (#("_" 0 1 (fontified t)) . 18010) (#("l" 0 1 (fontified t)) . 18010) (#("a" 0 1 (fontified t)) . 18010) (#("c" 0 1 (fontified t)) . 18010) (#("o" 0 1 (fontified t)) . 18010) (#("l" 0 1 (fontified t)) . 18010)) nil (25259 10745 349091 96000) 0 nil])
([nil nil ((18010 . 18012)) nil (25259 10745 349089 932000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 18131) (#("a" 0 1 (fontified t)) . 18131) (#("r" 0 1 (fontified t)) . 18131) (#("g" 0 1 (fontified t)) . 18131) (#("_" 0 1 (fontified t)) . 18131) (#("l" 0 1 (fontified t)) . 18131) (#("a" 0 1 (fontified t)) . 18131) (#("c" 0 1 (fontified t)) . 18131) (#("o" 0 1 (fontified t)) . 18131) (#("l" 0 1 (fontified t)) . 18131)) nil (25259 10745 349088 278000) 0 nil])
([nil nil ((18131 . 18133)) nil (25259 10745 349083 872000) 0 nil])
([nil nil ((10569 . 10570) (t 25259 10745 356208 300000)) nil (25259 10814 918080 168000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . 10569)) nil (25259 10814 918079 217000) 0 nil])
([nil nil ((10645 . 10647)) nil (25259 10814 918076 130000) 0 nil])
([nil current ((#(" " 0 1 (fontified t)) . -11486) (undo-tree-id2 . -1) 11487 (t 25259 10814 922689 600000)) nil (25259 10837 815123 348000) 0 nil])
nil
